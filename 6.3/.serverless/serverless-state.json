{
  "service": {
    "service": "DeepLearningTrainingBatch",
    "serviceObject": {
      "name": "DeepLearningTrainingBatch"
    },
    "provider": {
      "stage": "dev",
      "region": "us-east-1",
      "variableSyntax": "\\${([ ~:a-zA-Z0-9._@'\",\\-\\/\\(\\)]+?)}",
      "name": "aws",
      "runtime": "python3.6",
      "memorySize": 128,
      "timeout": 10,
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "s3:ListBucket"
          ],
          "Resource": {
            "Fn::Sub": "arn:aws:s3:::${S3BucketName}"
          }
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject"
          ],
          "Resource": {
            "Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"
          }
        }
      ],
      "versionFunctions": true,
      "remoteFunctionData": null,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "MapLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/DeepLearningTrainingBatch-dev-map"
            }
          },
          "ReduceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/DeepLearningTrainingBatch-dev-reduce"
            }
          },
          "PublisherLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/DeepLearningTrainingBatch-dev-publisher"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "DeepLearningTrainingBatch",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeepLearningTrainingBatch-dev-map:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeepLearningTrainingBatch-dev-reduce:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeepLearningTrainingBatch-dev-publisher:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeepLearningTrainingBatch-dev-map:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeepLearningTrainingBatch-dev-reduce:*:*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/DeepLearningTrainingBatch-dev-publisher:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "DeepLearningTrainingBatch",
                    "dev",
                    "us-east-1",
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "MapLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/DeepLearningTrainingBatch/dev/1582698789938-2020-02-26T06:33:09.938Z/DeepLearningTrainingBatch.zip"
              },
              "FunctionName": "DeepLearningTrainingBatch-dev-map",
              "Handler": "index.handlerMap",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.6",
              "Timeout": 10
            },
            "DependsOn": [
              "MapLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "MapLambdaVersionFxyHIG2jB2qrt5GyvremYyQgiTF8xIgsf99osTlu20": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MapLambdaFunction"
              },
              "CodeSha256": "Sh2Gp/gME3XDytykCodIrQDcrZsJ8LkGrquKJPw3NwY="
            }
          },
          "ReduceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/DeepLearningTrainingBatch/dev/1582698789938-2020-02-26T06:33:09.938Z/DeepLearningTrainingBatch.zip"
              },
              "FunctionName": "DeepLearningTrainingBatch-dev-reduce",
              "Handler": "index.handlerReduce",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.6",
              "Timeout": 10
            },
            "DependsOn": [
              "ReduceLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "ReduceLambdaVersion857Ck50xwlOvYwdk6smcQrnOMLeTLerg6DO94lwb34c": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ReduceLambdaFunction"
              },
              "CodeSha256": "Sh2Gp/gME3XDytykCodIrQDcrZsJ8LkGrquKJPw3NwY="
            }
          },
          "PublisherLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/DeepLearningTrainingBatch/dev/1582698789938-2020-02-26T06:33:09.938Z/DeepLearningTrainingBatch.zip"
              },
              "FunctionName": "DeepLearningTrainingBatch-dev-publisher",
              "Handler": "index.handlerPublisher",
              "MemorySize": 128,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Runtime": "python3.6",
              "Timeout": 10
            },
            "DependsOn": [
              "PublisherLogGroup",
              "IamRoleLambdaExecution"
            ]
          },
          "PublisherLambdaVersionCRgX1q71E7WB6h1yVAvfLrf2R01WOks9eHDEiD27nA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PublisherLambdaFunction"
              },
              "CodeSha256": "Sh2Gp/gME3XDytykCodIrQDcrZsJ8LkGrquKJPw3NwY="
            }
          },
          "DeepLearningTrainingBatchDashStepFunctionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "states.us-east-1.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "dev-us-east-1-DeepLearningTrainingBatch-statemachine",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-map"
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-map"
                                }
                              }
                            ]
                          },
                          {
                            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-reduce"
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-reduce"
                                }
                              }
                            ]
                          },
                          {
                            "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-publisher"
                          },
                          {
                            "Fn::Sub": [
                              "${functionArn}:*",
                              {
                                "functionArn": {
                                  "Fn::Sub": "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-publisher"
                                }
                              }
                            ]
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "batch:SubmitJob",
                          "batch:DescribeJobs",
                          "batch:TerminateJob"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "events:PutTargets",
                          "events:PutRule",
                          "events:DescribeRule"
                        ],
                        "Resource": [
                          {
                            "Fn::Join": [
                              ":",
                              [
                                "arn:aws:events",
                                {
                                  "Ref": "AWS::Region"
                                },
                                {
                                  "Ref": "AWS::AccountId"
                                },
                                "rule/StepFunctionsGetEventsForBatchJobsRule"
                              ]
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "DeepLearningTrainingBatchDashStepFunction": {
            "Type": "AWS::StepFunctions::StateMachine",
            "Properties": {
              "DefinitionString": {
                "Fn::Sub": "{\n  \"StartAt\": \"StartStepF\",\n  \"States\": {\n    \"StartStepF\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-map\",\n      \"Next\": \"MapStep\"\n    },\n    \"MapStep\": {\n      \"Type\": \"Map\",\n      \"ItemsPath\": \"$.tasks\",\n      \"Iterator\": {\n        \"StartAt\": \"BatchStep\",\n        \"States\": {\n          \"BatchStep\": {\n            \"Type\": \"Task\",\n            \"Resource\": \"arn:aws:states:::batch:submitJob.sync\",\n            \"Parameters\": {\n              \"JobName\": \"TrainStep\",\n              \"JobDefinition\": \"${JobDefinition}\",\n              \"JobQueue\": \"${JobQueue}\",\n              \"ContainerOverrides\": {\n                \"Command.$\": \"$.task_command\"\n              }\n            },\n            \"End\": true\n          }\n        }\n      },\n      \"ResultPath\": \"$.map_result\",\n      \"Retry\": [\n        {\n          \"ErrorEquals\": [\n            \"States.ALL\"\n          ],\n          \"IntervalSeconds\": 10,\n          \"MaxAttempts\": 2,\n          \"BackoffRate\": 2\n        }\n      ],\n      \"Next\": \"ReduceStepF\"\n    },\n    \"ReduceStepF\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-reduce\",\n      \"Next\": \"PublishStepF\"\n    },\n    \"PublishStepF\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:DeepLearningTrainingBatch-dev-publisher\",\n      \"End\": true\n    }\n  }\n}"
              },
              "RoleArn": {
                "Fn::GetAtt": [
                  "DeepLearningTrainingBatchDashStepFunctionRole",
                  "Arn"
                ]
              },
              "StateMachineName": "DeepLearningTrainingBatch-StepFunction"
            },
            "DependsOn": [
              "DeepLearningTrainingBatchDashStepFunctionRole"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-DeepLearningTrainingBatch",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              }
            }
          },
          "ApiGatewayResourceStartfunction": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "startFunction",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodStartfunctionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "AuthorizationType": "NONE",
              "ApiKeyRequired": false,
              "ResourceId": {
                "Ref": "ApiGatewayResourceStartfunction"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Credentials": {
                  "Fn::GetAtt": [
                    "ApigatewayToStepFunctionsRole",
                    "Arn"
                  ]
                },
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":states:action/StartExecution"
                    ]
                  ]
                },
                "PassthroughBehavior": "NEVER",
                "RequestTemplates": {
                  "application/json": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "DeepLearningTrainingBatchDashStepFunction"
                        }
                      }
                    ]
                  },
                  "application/x-www-form-urlencoded": {
                    "Fn::Sub": [
                      "\n#set( $body = $util.escapeJavaScript($input.json('$')).replaceAll(\"\\\\'\", \"'\") )\n{\"input\": \"$body\", \"name\": \"$context.requestId\", \"stateMachineArn\":\"${StateMachineArn}\"}",
                      {
                        "StateMachineArn": {
                          "Ref": "DeepLearningTrainingBatchDashStepFunction"
                        }
                      }
                    ]
                  }
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": 200,
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": 400,
                    "ResponseParameters": {},
                    "ResponseTemplates": {}
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {},
                  "ResponseModels": {},
                  "StatusCode": 400
                }
              ]
            }
          },
          "ApigatewayToStepFunctionsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "apigatewaytostepfunctions",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "states:StartExecution"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ApiGatewayDeployment1582698789959": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodStartfunctionGet"
            ]
          },
          "ComputeEnvironment": {
            "Type": "AWS::Batch::ComputeEnvironment",
            "Properties": {
              "Type": "MANAGED",
              "ServiceRole": {
                "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/service-role/AWSBatchServiceRole"
              },
              "ComputeEnvironmentName": {
                "Fn::Sub": "${AWS::StackName}-ComputeEnvironment"
              },
              "ComputeResources": {
                "MaxvCpus": 40,
                "MinvCpus": 0,
                "DesiredvCpus": 0,
                "Type": "EC2",
                "BidPercentage": 100,
                "InstanceTypes": [
                  "p2.xlarge"
                ],
                "SpotIamFleetRole": {
                  "Fn::Sub": "arn:aws:iam::${AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role"
                },
                "SecurityGroupIds": [
                  {
                    "Ref": "BatchSecurityGroup"
                  }
                ],
                "Subnets": [
                  {
                    "Ref": "PublicSubnet"
                  }
                ],
                "InstanceRole": "ecsInstanceRole",
                "Tags": {
                  "Name": {
                    "Fn::Sub": "Batch Instance - ${AWS::StackName}"
                  }
                }
              },
              "State": "ENABLED"
            }
          },
          "JobQueue": {
            "Type": "AWS::Batch::JobQueue",
            "Properties": {
              "ComputeEnvironmentOrder": [
                {
                  "Order": 1,
                  "ComputeEnvironment": {
                    "Ref": "ComputeEnvironment"
                  }
                }
              ],
              "State": "ENABLED",
              "Priority": 1,
              "JobQueueName": {
                "Fn::Sub": "${AWS::StackName}-JobQueue"
              }
            }
          },
          "JobDefinition": {
            "Type": "AWS::Batch::JobDefinition",
            "Properties": {
              "Type": "Container",
              "ContainerProperties": {
                "Command": [
                  "ls"
                ],
                "Memory": 60000,
                "Vcpus": 4,
                "Image": {
                  "Fn::Sub": "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ImageName}"
                },
                "JobRoleArn": {
                  "Ref": "ECSTaskRole"
                },
                "ResourceRequirements": [
                  {
                    "Type": "GPU",
                    "Value": 1
                  }
                ]
              },
              "JobDefinitionName": {
                "Fn::Sub": "${AWS::StackName}-JobDefinition"
              },
              "RetryStrategy": {
                "Attempts": 1
              }
            }
          },
          "PubPrivateVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
              "CidrBlock": "172.31.0.0/16",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Join": [
                      "_",
                      [
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    ]
                  }
                }
              ]
            }
          },
          "PublicSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
              "VpcId": {
                "Ref": "PubPrivateVPC"
              },
              "AvailabilityZone": {
                "Fn::Sub": "${AWS::Region}a"
              },
              "CidrBlock": "172.31.48.0/20",
              "MapPublicIpOnLaunch": true
            }
          },
          "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {
              "Tags": [
                {
                  "Key": "Name",
                  "Value": {
                    "Fn::Join": [
                      "_",
                      [
                        {
                          "Ref": "AWS::StackName"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Key": "Network",
                  "Value": "Public"
                }
              ]
            }
          },
          "GatewayToInternet": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
              "VpcId": {
                "Ref": "PubPrivateVPC"
              },
              "InternetGatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "PublicRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
              "VpcId": {
                "Ref": "PubPrivateVPC"
              },
              "Tags": [
                {
                  "Key": "Network",
                  "Value": "Public"
                }
              ]
            }
          },
          "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "DependsOn": "GatewayToInternet",
            "Properties": {
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              },
              "DestinationCidrBlock": "0.0.0.0/0",
              "GatewayId": {
                "Ref": "InternetGateway"
              }
            }
          },
          "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
              "SubnetId": {
                "Ref": "PublicSubnet"
              },
              "RouteTableId": {
                "Ref": "PublicRouteTable"
              }
            }
          },
          "BatchSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
              "GroupDescription": "Allow 22 port",
              "SecurityGroupIngress": [
                {
                  "IpProtocol": "tcp",
                  "CidrIp": "0.0.0.0/0",
                  "FromPort": 22,
                  "ToPort": 22
                }
              ],
              "VpcId": {
                "Ref": "PubPrivateVPC"
              }
            }
          },
          "ECSTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "ecs-tasks.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Path": "/",
              "Policies": [
                {
                  "PolicyName": "AmazonECSTaskRolePolicy",
                  "PolicyDocument": {
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:ListBucket"
                        ],
                        "Resource": {
                          "Fn::Sub": "arn:aws:s3:::${S3BucketName}"
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "s3:PutObject",
                          "s3:GetObject"
                        ],
                        "Resource": {
                          "Fn::Sub": "arn:aws:s3:::${S3BucketName}/*"
                        }
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "cloudwatch:PutMetricData"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          },
          "MapLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MapLambdaVersionFxyHIG2jB2qrt5GyvremYyQgiTF8xIgsf99osTlu20"
            }
          },
          "ReduceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ReduceLambdaVersion857Ck50xwlOvYwdk6smcQrnOMLeTLerg6DO94lwb34c"
            }
          },
          "PublisherLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PublisherLambdaVersionCRgX1q71E7WB6h1yVAvfLrf2R01WOks9eHDEiD27nA"
            }
          },
          "DeepLearningTrainingBatchDashStepFunctionArn": {
            "Description": "Current StateMachine Arn",
            "Value": {
              "Ref": "DeepLearningTrainingBatchDashStepFunction"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            }
          }
        },
        "Parameters": {
          "ImageName": {
            "Type": "String",
            "Default": "deep-learning-training-batch:latest",
            "Description": "The name of a docker image that contains the training code"
          },
          "S3BucketName": {
            "Type": "String",
            "Default": "course-pdl-deep-learning-pipeline",
            "Description": "S3 bucket which we will use to store hyperparameters and models"
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-step-functions",
      "serverless-pseudo-parameters"
    ],
    "pluginsData": {},
    "functions": {
      "map": {
        "handler": "index.handlerMap",
        "events": [],
        "name": "DeepLearningTrainingBatch-dev-map",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.6",
        "vpc": {}
      },
      "reduce": {
        "handler": "index.handlerReduce",
        "events": [],
        "name": "DeepLearningTrainingBatch-dev-reduce",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.6",
        "vpc": {}
      },
      "publisher": {
        "handler": "index.handlerPublisher",
        "events": [],
        "name": "DeepLearningTrainingBatch-dev-publisher",
        "package": {},
        "memory": 128,
        "timeout": 10,
        "runtime": "python3.6",
        "vpc": {}
      }
    },
    "resources": {
      "Parameters": {
        "ImageName": {
          "Type": "String",
          "Default": "deep-learning-training-batch:latest",
          "Description": "The name of a docker image that contains the training code"
        },
        "S3BucketName": {
          "Type": "String",
          "Default": "course-pdl-deep-learning-pipeline",
          "Description": "S3 bucket which we will use to store hyperparameters and models"
        }
      },
      "Resources": {
        "ComputeEnvironment": {
          "Type": "AWS::Batch::ComputeEnvironment",
          "Properties": {
            "Type": "MANAGED",
            "ServiceRole": "arn:aws:iam::#{AWS::AccountId}:role/service-role/AWSBatchServiceRole",
            "ComputeEnvironmentName": "#{AWS::StackName}-ComputeEnvironment",
            "ComputeResources": {
              "MaxvCpus": 40,
              "MinvCpus": 0,
              "DesiredvCpus": 0,
              "Type": "EC2",
              "BidPercentage": 100,
              "InstanceTypes": [
                "p2.xlarge"
              ],
              "SpotIamFleetRole": "arn:aws:iam::#{AWS::AccountId}:role/aws-ec2-spot-fleet-tagging-role",
              "SecurityGroupIds": [
                {
                  "Ref": "BatchSecurityGroup"
                }
              ],
              "Subnets": [
                {
                  "Ref": "PublicSubnet"
                }
              ],
              "InstanceRole": "ecsInstanceRole",
              "Tags": {
                "Name": "Batch Instance - #{AWS::StackName}"
              }
            },
            "State": "ENABLED"
          }
        },
        "JobQueue": {
          "Type": "AWS::Batch::JobQueue",
          "Properties": {
            "ComputeEnvironmentOrder": [
              {
                "Order": 1,
                "ComputeEnvironment": {
                  "Ref": "ComputeEnvironment"
                }
              }
            ],
            "State": "ENABLED",
            "Priority": 1,
            "JobQueueName": "#{AWS::StackName}-JobQueue"
          }
        },
        "JobDefinition": {
          "Type": "AWS::Batch::JobDefinition",
          "Properties": {
            "Type": "Container",
            "ContainerProperties": {
              "Command": [
                "ls"
              ],
              "Memory": 60000,
              "Vcpus": 4,
              "Image": "#{AWS::AccountId}.dkr.ecr.#{AWS::Region}.amazonaws.com/#{ImageName}",
              "JobRoleArn": {
                "Ref": "ECSTaskRole"
              },
              "ResourceRequirements": [
                {
                  "Type": "GPU",
                  "Value": 1
                }
              ]
            },
            "JobDefinitionName": "#{AWS::StackName}-JobDefinition",
            "RetryStrategy": {
              "Attempts": 1
            }
          }
        },
        "PubPrivateVPC": {
          "Type": "AWS::EC2::VPC",
          "Properties": {
            "CidrBlock": "172.31.0.0/16",
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Fn::Join": [
                    "_",
                    [
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                }
              }
            ]
          }
        },
        "PublicSubnet": {
          "Type": "AWS::EC2::Subnet",
          "Properties": {
            "VpcId": {
              "Ref": "PubPrivateVPC"
            },
            "AvailabilityZone": "#{AWS::Region}a",
            "CidrBlock": "172.31.48.0/20",
            "MapPublicIpOnLaunch": true
          }
        },
        "InternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
            "Tags": [
              {
                "Key": "Name",
                "Value": {
                  "Fn::Join": [
                    "_",
                    [
                      {
                        "Ref": "AWS::StackName"
                      }
                    ]
                  ]
                }
              },
              {
                "Key": "Network",
                "Value": "Public"
              }
            ]
          }
        },
        "GatewayToInternet": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
            "VpcId": {
              "Ref": "PubPrivateVPC"
            },
            "InternetGatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "PublicRouteTable": {
          "Type": "AWS::EC2::RouteTable",
          "Properties": {
            "VpcId": {
              "Ref": "PubPrivateVPC"
            },
            "Tags": [
              {
                "Key": "Network",
                "Value": "Public"
              }
            ]
          }
        },
        "PublicRoute": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "GatewayToInternet",
          "Properties": {
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            },
            "DestinationCidrBlock": "0.0.0.0/0",
            "GatewayId": {
              "Ref": "InternetGateway"
            }
          }
        },
        "PublicSubnetRouteTableAssociation": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
            "SubnetId": {
              "Ref": "PublicSubnet"
            },
            "RouteTableId": {
              "Ref": "PublicRouteTable"
            }
          }
        },
        "BatchSecurityGroup": {
          "Type": "AWS::EC2::SecurityGroup",
          "Properties": {
            "GroupDescription": "Allow 22 port",
            "SecurityGroupIngress": [
              {
                "IpProtocol": "tcp",
                "CidrIp": "0.0.0.0/0",
                "FromPort": 22,
                "ToPort": 22
              }
            ],
            "VpcId": {
              "Ref": "PubPrivateVPC"
            }
          }
        },
        "ECSTaskRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "AssumeRolePolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "ecs-tasks.amazonaws.com"
                    ]
                  },
                  "Action": [
                    "sts:AssumeRole"
                  ]
                }
              ]
            },
            "Path": "/",
            "Policies": [
              {
                "PolicyName": "AmazonECSTaskRolePolicy",
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:ListBucket"
                      ],
                      "Resource": "arn:aws:s3:::#{S3BucketName}"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "s3:PutObject",
                        "s3:GetObject"
                      ],
                      "Resource": "arn:aws:s3:::#{S3BucketName}/*"
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "cloudwatch:PutMetricData"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "layers": {},
    "stepFunctions": {
      "stateMachines": {
        "HelloWorldStepFunction": {
          "events": [
            {
              "http": {
                "path": "startFunction",
                "method": "get"
              }
            }
          ],
          "name": "DeepLearningTrainingBatch-StepFunction",
          "definition": {
            "StartAt": "StartStepF",
            "States": {
              "StartStepF": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:DeepLearningTrainingBatch-dev-map",
                "Next": "MapStep"
              },
              "MapStep": {
                "Type": "Map",
                "ItemsPath": "$.tasks",
                "Iterator": {
                  "StartAt": "BatchStep",
                  "States": {
                    "BatchStep": {
                      "Type": "Task",
                      "Resource": "arn:aws:states:::batch:submitJob.sync",
                      "Parameters": {
                        "JobName": "TrainStep",
                        "JobDefinition": "#{JobDefinition}",
                        "JobQueue": "#{JobQueue}",
                        "ContainerOverrides": {
                          "Command.$": "$.task_command"
                        }
                      },
                      "End": true
                    }
                  }
                },
                "ResultPath": "$.map_result",
                "Retry": [
                  {
                    "ErrorEquals": [
                      "States.ALL"
                    ],
                    "IntervalSeconds": 10,
                    "MaxAttempts": 2,
                    "BackoffRate": 2
                  }
                ],
                "Next": "ReduceStepF"
              },
              "ReduceStepF": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:DeepLearningTrainingBatch-dev-reduce",
                "Next": "PublishStepF"
              },
              "PublishStepF": {
                "Type": "Task",
                "Resource": "arn:aws:lambda:#{AWS::Region}:#{AWS::AccountId}:function:DeepLearningTrainingBatch-dev-publisher",
                "End": true
              }
            }
          }
        }
      },
      "activities": []
    },
    "artifact": "/Users/ryfeus/GoogleDrive/CourseBlogsProposals/Course - Practical deep learning in Cloud/Code/lesson6.3/.serverless/DeepLearningTrainingBatch.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/DeepLearningTrainingBatch/dev/1582698789938-2020-02-26T06:33:09.938Z",
    "artifact": "DeepLearningTrainingBatch.zip"
  }
}